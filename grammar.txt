WIP grammar for the gremlin language
() denotes 1 or more repititions
{} denotes 0 or more repititions
[] denotes an optional sequence
<> denotes a range of characters or values
\a denotes an alphabetical character
\c denotes a character
\d denotes a digit

IDENT  -> (\a | '_'){\a | '_' | \d}
STRING -> '"' {\c} '"'

TYPE_NAME -> IDENT
           | "var"

TYPE -> {'[' EXPRESSION ']'} {'*'} TYPE_NAME
     
MODULE -> {COMPILER_DIRECTIVE | USER_LEVEL_NOTE | CONSTANT_DECLARATION | VARIABLE_DECLARATION | TYPE_DECLARATION | FUNCTION_DECLARATION}

COMPILER_DIRECTIVE -> '#' IDENT [STRING | COMPOUND_STATEMENT]
USER_LEVEL_NOTE -> '@' IDENT

CONSTANT_DECLARATION -> IDENT "::" EXPRESSION ';'

VARIABLE_DECLARATION -> IDENT ':' TYPE ['=' EXPRESSION] ';'
                      | IDENT ':' '=' EXPRESSION ';'

TYPE_DECLARATION -> IDENT "::" "struct" COMPOUND_STATEMENT
                  | IDENT "::" "union"  COMPOUND_SATEMENT

FUNCTION_DECLARATION_ARGUMENT_LIST -> {IDENT ':' TYPE ['=' EXPRESSION]}
FUNCTION_DECLARATION -> IDENT "::" '(' FUNCTION_DECLARATION_ARGUMENT_LIST ')' ["->" TYPE] COMPOUND_STATEMENT

STATEMENT -> ';'
           | EXPRESSION ';'
           | COMPOUND_STATEMENT
           | "if" '(' EXPRESSION ')' STATEMENT ["else" STATEMENT]
           | "while" '(' EXPRESSION ')' STATEMENT
           | "do" ["while" '(' EXPRESSION ')'] STATEMENT
           | "for" '(' [EXPRESSION] ';' [EXPRESSION] ';' [EXPRESSION] ')' STATEMENT
           | return EXPRESSION ';'
           | defer EXPRESSION ';'

EXPRESSION ->