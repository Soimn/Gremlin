WIP grammar for the gremlin language
() denotes 1 or more repititions
{} denotes 0 or more repititions
[] denotes an optional sequence
<> denotes a range of characters or values
\a denotes an alphabetical character
\c denotes a character
\d denotes a digit

IDENT  -> (\a | '_'){\a | '_' | \d}
STRING -> '"' {\c} '"'

TYPE -> {'[' CONDITIONAL_EXPRESSION ']' | '&'} IDENT
      | '('[IDENT ':' TYPE {',' IDENT ':' TYPE}]')' ["->" TYPE]
     
MODULE -> {COMPILER_DIRECTIVE | USER_LEVEL_NOTE | CONSTANT_DECLARATION | VARIABLE_DECLARATION | TYPE_DECLARATION | FUNCTION_DECLARATION}

COMPILER_DIRECTIVE -> '#' IDENT [STRING | COMPOUND_STATEMENT]
USER_LEVEL_NOTE -> '@' IDENT

CONSTANT_DECLARATION -> IDENT "::" CONDITIONAL_EXPRESSION ';'

VARIABLE_DECLARATION -> IDENT ':' TYPE ['=' ASSIGNMENT_EXPRESSION] ';'
                      | IDENT ':' '=' ASSIGNMENT_EXPRESSION ';'

TYPE_DECLARATION -> IDENT "::" "struct" COMPOUND_STATEMENT
                  | IDENT "::" "union"  COMPOUND_SATEMENT

FUNCTION_DECLARATION_ARGUMENT_LIST -> {IDENT ':' TYPE ['=' CONDITIONAL_EXPRESSION]}
FUNCTION_DECLARATION -> IDENT "::" '(' FUNCTION_DECLARATION_ARGUMENT_LIST ')' ["->" TYPE] COMPOUND_STATEMENT

STATEMENT -> ';'
           | ASSIGNMENT_EXPRESSION ';'
           | COMPOUND_STATEMENT
           | "if" '(' CONDITIONAL_EXPRESSION ')' STATEMENT ["else" STATEMENT]
           | "while" '(' CONDITIONAL_EXPRESSION ')' STATEMENT
           | return CONDITIONAL_EXPRESSION ';'
           | defer STATEMENT

ASSIGNMENT_OPERATOR -> "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^=" | "="
UNARY_OPERATOR      -> "&" | "*" | "+" | "-" | "~" | "!"

ASSIGNMENT_EXPRESSION -> CONDITIONAL_EXPRESSION
                       | UNARY_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION

CONDITIONAL_EXPRESSION -> LOGICAL_OR_EXPRESSION
                        | LOGICAL_OR_EXPRESSION '?' EXPRESSION ':' CONDITIONAL_EXPRESSION

LOGICAL_OR_EXPRESSION -> LOGICAL_AND_EXPRESSION
                       | LOGICAL_AND_EXPRESSION "||" LOGICAL_OR_EXPRESSION

LOGICAL_AND_EXPRESSION -> INCLUSIVE_OR_EXPRESSION
                        | INCLUSIVE_OR_EXPRESSION "&&" LOGICAL_AND_EXPRESSION

INCLUSIVE_OR_EXPRESSION -> EXCLUSIVE_OR_EXPRESSION
                         | EXCLUSIVE_OR_EXPRESSION '|' INCLUSIVE_OR_EXPRESSION

EXCLUSIVE_OR_EXPRESSION -> AND_EXPRESSION
                         | AND_EXPRESSION '^' EXCLUSIVE_OR_EXPRESSION

AND_EXPRESSION -> EQUALITY_EXPRESSION
                | EQUALITY_EXPRESSION '&' AND_EXPRESSION

EQUALITY_EXPRESSION -> RELATIONAL_EXPRESSION
                     | RELATIONAL_EXPRESSION "==" EQUALITY_EXPRESSION
                     | RELATIONAL_EXPRESSION "!=" EQUALITY_EXPRESSION

RELATIONAL_EXPRESSION -> SHIFT_EXPRESSION
                       | SHIFT_EXPRESSION '<' RELATIONAL_EXPRESSION
                       | SHIFT_EXPRESSION '>' RELATIONAL_EXPRESSION
                       | SHIFT_EXPRESSION "<=" RELATIONAL_EXPRESSION
                       | SHIFT_EXPRESSION ">=" RELATIONAL_EXPRESSION

SHIFT_EXPRESSION -> ADDITIVE_EXPRESSION
                  | ADDITIVE_EXPRESSION "<<" SHIFT_EXPRESSION
                  | ADDITIVE_EXPRESSION ">>" SHIFT_EXPRESSION

ADDITIVE_EXPRESSION -> MULTIPLICATIVE_EXPRESSION
                     | MULTIPLICATIVE_EXPRESSION '+' ADDITIVE_EXPRESSION
                     | MULTIPLICATIVE_EXPRESSION '-' ADDITIVE_EXPRESSION

MULTIPLICATIVE_EXPRESSION -> CAST_EXPRESSION
                           | CAST_EXPRESSION '*' MULTIPLICATIVE_EXPRESSION
                           | CAST_EXPRESSION '/' MULTIPLICATIVE_EXPRESSION
                           | CAST_EXPRESSION '%' MULTIPLICATIVE_EXPRESSION



CAST_EXPRESSION -> UNARY_EXPRESSION
                 | "cast" '(' TYPE ')' CAST_EXPRESSION

UNARY_EXPRESSION -> POSTFIX_EXPRESSION
                  | "++" UNARY_EXPRESSION
                  | "--" UNARY_EXPRESSION
                  | UNARY_OPERATOR CAST_EXPRESSION

POSTFIX_EXPRESSION -> PRIMARY_EXPRESSION
                    | POSTFIX_EXPRESSION '[' EXPRESSION ']'
                    | POSTFIX_EXPRESSION '(' ')'
                    | POSTFIX_EXPRESSION '(' ARGUMENT_EXPRESSION_LIST ')'
                    | POSTFIX_EXPRESSION '.' IDENT
                    | POSTFIX_EXPRESSION "++"
                    | POSTFIX_EXPRESSION "--"

PRIMARY_EXPRESSION -> IDENTIFIER
                    | CONSTANT
                    | STRING
                    | '(' EXPRESSION ')'